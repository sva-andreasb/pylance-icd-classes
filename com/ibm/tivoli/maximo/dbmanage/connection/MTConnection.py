CONTEXTCHANGE = "String  MTConnection.setContext""
UNSUPPORTED = "String  MTConnection.unsupported""
def setEnableUpdateTeantCodeDefaultValue():
'''public void setEnableUpdateTeantCodeDefaultValue(final boolean enableUpdateTeantCodeDefaultValue)
'''
pass
def MTConnection():
'''public MTConnection(final Connection conDB, final Properties properties)
'''
pass
def clearWarnings():
'''public void clearWarnings()
'''
pass
def close():
'''public void close()
'''
pass
def commit():
'''public void commit()
'''
pass
def getContextConnection():
'''public Connection getContextConnection(final MTContext context)
'''
pass
def getContext():
'''public MTContext getContext()
'''
pass
def createArrayOf():
'''public Array createArrayOf(final String arg0, final Object[] arg1)
'''
pass
def createBlob():
'''public Blob createBlob()
'''
pass
def createClob():
'''public Clob createClob()
'''
pass
def createNClob():
'''public NClob createNClob()
'''
pass
def createSQLXML():
'''public SQLXML createSQLXML()
'''
pass
def createStatement():
'''public Statement createStatement()
public Statement createStatement(final int resultSetType, final int resultSetConcurrency)
public Statement createStatement(final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability)
'''
pass
def createStruct():
'''public Struct createStruct(final String arg0, final Object[] arg1)
'''
pass
def getAutoCommit():
'''public boolean getAutoCommit()
'''
pass
def getCatalog():
'''public String getCatalog()
'''
pass
def getClientInfo():
'''public Properties getClientInfo()
public String getClientInfo(final String arg0)
'''
pass
def getHoldability():
'''public int getHoldability()
'''
pass
def getMetaData():
'''public DatabaseMetaData getMetaData()
'''
pass
def getTransactionIsolation():
'''public int getTransactionIsolation()
'''
pass
def getWarnings():
'''public SQLWarning getWarnings()
'''
pass
def isClosed():
'''public boolean isClosed()
'''
pass
def isReadOnly():
'''public boolean isReadOnly()
'''
pass
def isValid():
'''public boolean isValid(final int arg0)
'''
pass
def nativeSQL():
'''public String nativeSQL(final String arg0)
'''
pass
def prepareCall():
'''public CallableStatement prepareCall(final String sql)
public CallableStatement prepareCall(final String arg0, final int arg1, final int arg2)
public CallableStatement prepareCall(final String arg0, final int arg1, final int arg2, final int arg3)
'''
pass
def prepareStatement():
'''public PreparedStatement prepareStatement(final String sql)
public PreparedStatement prepareStatement(final String sql, final int autoGeneratedKeys)
public PreparedStatement prepareStatement(final String sql, final int[] columnIndexes)
public PreparedStatement prepareStatement(final String sql, final String[] columnNames)
public PreparedStatement prepareStatement(final String sql, final int resultSetType, final int resultSetConcurrency)
public PreparedStatement prepareStatement(final String sql, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability)
'''
pass
def releaseSavepoint():
'''public void releaseSavepoint(final Savepoint arg0)
'''
pass
def rollback():
'''public void rollback()
public void rollback(final Savepoint savepoint)
'''
pass
def setAutoCommit():
'''public void setAutoCommit(final boolean autoCommit)
'''
pass
def setCatalog():
'''public void setCatalog(final String arg0)
'''
pass
def setClientInfo():
'''public void setClientInfo(final Properties arg0)
public void setClientInfo(final String arg0, final String arg1)
'''
pass
def setHoldability():
'''public void setHoldability(final int arg0)
'''
pass
def setReadOnly():
'''public void setReadOnly(final boolean arg0)
'''
pass
def setSavepoint():
'''public Savepoint setSavepoint()
public Savepoint setSavepoint(final String arg0)
'''
pass
def setTransactionIsolation():
'''public void setTransactionIsolation(final int arg0)
'''
pass
def setTypeMap():
'''public void setTypeMap(final Map<String, Class<?>> arg0)
'''
pass
def isWrapperFor():
'''public boolean isWrapperFor(final Class<?> iface)
'''
pass
def unwrap():
'''public <T> T unwrap(final Class<T> iface)
'''
pass
def setStorageType():
'''public void setStorageType(final String tbname, final MTStorageType st)
'''
pass
def getStorageType():
'''public MTStorageType getStorageType(String tbname)
'''
pass
def getContextForSql():
'''public List<ContextSql> getContextForSql(final String sql)
'''
pass
def getContextForQuery():
'''public MTContext getContextForQuery(final String sql)
'''
pass
def getTenantContexts():
'''public Set<MTContext> getTenantContexts()
'''
pass
def getAllContexts():
'''public Set<MTContext> getAllContexts()
'''
pass
def setTargetContexts():
'''public void setTargetContexts(final Collection<MTContext> c)
'''
pass
def setTargetContext():
'''public void setTargetContext(final MTContext c)
'''
pass
def getTargetContext():
'''public List<MTContext> getTargetContext()
'''
pass
def setTargetContextByName():
'''public void setTargetContextByName(final String context)
'''
pass
def pushContext():
'''public void pushContext(final MTContext context)
public void pushContext(final List<MTContext> contextList)
'''
pass
def popContext():
'''public void popContext()
'''
pass
def setNetworkTimeout():
'''public void setNetworkTimeout(final Executor executor, final int milliseconds)
'''
pass
def getNetworkTimeout():
'''public int getNetworkTimeout()
'''
pass
def setSchema():
'''public void setSchema(final String schema)
'''
pass
def getSchema():
'''public String getSchema()
'''
pass
def abort():
'''public void abort(final Executor executor)
'''
pass
