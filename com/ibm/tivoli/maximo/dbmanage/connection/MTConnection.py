CONTEXTCHANGE = "String  \"MTConnection.setContext\""
UNSUPPORTED = "String  \"MTConnection.unsupported\""
def setEnableUpdateTeantCodeDefaultValue():
    '''    public void setEnableUpdateTeantCodeDefaultValue(final boolean enableUpdateTeantCodeDefaultValue)
    '''
def MTConnection():
    '''    public MTConnection(final Connection conDB, final Properties properties)
    '''
def clearWarnings():
    '''    public void clearWarnings()
    '''
def close():
    '''    public void close()
    '''
def commit():
    '''    public void commit()
    '''
def getContextConnection():
    '''    public Connection getContextConnection(final MTContext context)
    '''
def getContext():
    '''    public MTContext getContext()
    '''
def createArrayOf():
    '''    public Array createArrayOf(final String arg0, final Object[] arg1)
    '''
def createBlob():
    '''    public Blob createBlob()
    '''
def createClob():
    '''    public Clob createClob()
    '''
def createNClob():
    '''    public NClob createNClob()
    '''
def createSQLXML():
    '''    public SQLXML createSQLXML()
    '''
def createStatement():
    '''    public Statement createStatement()
    public Statement createStatement(final int resultSetType, final int resultSetConcurrency)
    public Statement createStatement(final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability)
    '''
def createStruct():
    '''    public Struct createStruct(final String arg0, final Object[] arg1)
    '''
def getAutoCommit():
    '''    public boolean getAutoCommit()
    '''
def getCatalog():
    '''    public String getCatalog()
    '''
def getClientInfo():
    '''    public Properties getClientInfo()
    public String getClientInfo(final String arg0)
    '''
def getHoldability():
    '''    public int getHoldability()
    '''
def getMetaData():
    '''    public DatabaseMetaData getMetaData()
    '''
def getTransactionIsolation():
    '''    public int getTransactionIsolation()
    '''
def getWarnings():
    '''    public SQLWarning getWarnings()
    '''
def isClosed():
    '''    public boolean isClosed()
    '''
def isReadOnly():
    '''    public boolean isReadOnly()
    '''
def isValid():
    '''    public boolean isValid(final int arg0)
    '''
def nativeSQL():
    '''    public String nativeSQL(final String arg0)
    '''
def prepareCall():
    '''    public CallableStatement prepareCall(final String sql)
    public CallableStatement prepareCall(final String arg0, final int arg1, final int arg2)
    public CallableStatement prepareCall(final String arg0, final int arg1, final int arg2, final int arg3)
    '''
def prepareStatement():
    '''    public PreparedStatement prepareStatement(final String sql)
    public PreparedStatement prepareStatement(final String sql, final int autoGeneratedKeys)
    public PreparedStatement prepareStatement(final String sql, final int[] columnIndexes)
    public PreparedStatement prepareStatement(final String sql, final String[] columnNames)
    public PreparedStatement prepareStatement(final String sql, final int resultSetType, final int resultSetConcurrency)
    public PreparedStatement prepareStatement(final String sql, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability)
    '''
def releaseSavepoint():
    '''    public void releaseSavepoint(final Savepoint arg0)
    '''
def rollback():
    '''    public void rollback()
    public void rollback(final Savepoint savepoint)
    '''
def setAutoCommit():
    '''    public void setAutoCommit(final boolean autoCommit)
    '''
def setCatalog():
    '''    public void setCatalog(final String arg0)
    '''
def setClientInfo():
    '''    public void setClientInfo(final Properties arg0)
    public void setClientInfo(final String arg0, final String arg1)
    '''
def setHoldability():
    '''    public void setHoldability(final int arg0)
    '''
def setReadOnly():
    '''    public void setReadOnly(final boolean arg0)
    '''
def setSavepoint():
    '''    public Savepoint setSavepoint()
    public Savepoint setSavepoint(final String arg0)
    '''
def setTransactionIsolation():
    '''    public void setTransactionIsolation(final int arg0)
    '''
def setTypeMap():
    '''    public void setTypeMap(final Map<String, Class<?>> arg0)
    '''
def isWrapperFor():
    '''    public boolean isWrapperFor(final Class<?> iface)
    '''
def unwrap():
    '''    public <T> T unwrap(final Class<T> iface)
    '''
def setStorageType():
    '''    public void setStorageType(final String tbname, final MTStorageType st)
    '''
def getStorageType():
    '''    public MTStorageType getStorageType(String tbname)
    '''
def getContextForSql():
    '''    public List<ContextSql> getContextForSql(final String sql)
    '''
def getContextForQuery():
    '''    public MTContext getContextForQuery(final String sql)
    '''
def getTenantContexts():
    '''    public Set<MTContext> getTenantContexts()
    '''
def getAllContexts():
    '''    public Set<MTContext> getAllContexts()
    '''
def setTargetContexts():
    '''    public void setTargetContexts(final Collection<MTContext> c)
    '''
def setTargetContext():
    '''    public void setTargetContext(final MTContext c)
    '''
def getTargetContext():
    '''    public List<MTContext> getTargetContext()
    '''
def setTargetContextByName():
    '''    public void setTargetContextByName(final String context)
    '''
def pushContext():
    '''    public void pushContext(final MTContext context)
    public void pushContext(final List<MTContext> contextList)
    '''
def popContext():
    '''    public void popContext()
    '''
def setNetworkTimeout():
    '''    public void setNetworkTimeout(final Executor executor, final int milliseconds)
    '''
def getNetworkTimeout():
    '''    public int getNetworkTimeout()
    '''
def setSchema():
    '''    public void setSchema(final String schema)
    '''
def getSchema():
    '''    public String getSchema()
    '''
def abort():
    '''    public void abort(final Executor executor)
    '''
