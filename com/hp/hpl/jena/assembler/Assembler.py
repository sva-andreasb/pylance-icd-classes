defaultModel = "Assembler  new DefaultModelAssembler()"
memoryModel = "Assembler  new MemoryModelAssembler()"
infModel = "Assembler  new InfModelAssembler()"
rdbModel = "Assembler  new RDBModelAssembler()"
ontModel = "Assembler  new OntModelAssembler()"
reasonerFactory = "Assembler  new ReasonerFactoryAssembler()"
content = "Assembler  new ContentAssembler()"
connection = "Assembler  new ConnectionAssembler()"
prefixMapping = "Assembler  new PrefixMappingAssembler()"
fileModel = "Assembler  new FileModelAssembler()"
unionModel = "Assembler  new UnionModelAssembler()"
ontModelSpec = "Assembler  new OntModelSpecAssembler()"
ruleSet = "Assembler  new RuleSetAssembler()"
modelSource = "Assembler  new ModelSourceAssembler()"
locationMapper = "Assembler  new LocationMapperAssembler()"
fileManager = "Assembler  new FileManagerAssembler()"
documentManager = "Assembler  new DocumentManagerAssembler()"
general = "AssemblerGroup  AssemblerGroup.create().implementWith(JA.DefaultModel, Assembler.defaultModel).implementWith(JA.MemoryModel, Assembler.memoryModel).implementWith(JA.InfModel, Assembler.infModel).implementWith(JA.ReasonerFactory, Assembler.reasonerFactory).implementWith(JA.ModelSource, Assembler.modelSource).implementWith(JA.RDBModelSource, Assembler.modelSource).implementWith(JA.Content, Assembler.content).implementWith(JA.ContentItem, Assembler.content).implementWith(JA.Connection, Assembler.connection).implementWith(JA.RDBModel, Assembler.rdbModel).implementWith(JA.UnionModel, Assembler.unionModel).implementWith(JA.PrefixMapping, Assembler.prefixMapping).implementWith(JA.SinglePrefixMapping, Assembler.prefixMapping).implementWith(JA.FileModel, Assembler.fileModel).implementWith(JA.OntModel, Assembler.ontModel).implementWith(JA.OntModelSpec, Assembler.ontModelSpec).implementWith(JA.RuleSet, Assembler.ruleSet).implementWith(JA.LocationMapper, Assembler.locationMapper).implementWith(JA.FileManager, Assembler.fileManager).implementWith(JA.DocumentManager, Assembler.documentManager)"
